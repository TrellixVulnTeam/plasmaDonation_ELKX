
#Workflow name
name: deploy-spring
on:
  #Trigger the workflow on push from the main branch
  push:
    branches:
      - main
jobs:
  #Test's job
  build:
    name: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
       - uses: actions/checkout@v1
      #Set up JDK 11
       - name: Set up JDK
         uses: actions/setup-java@v1
         with:
            java-version: '11'
        #Set up Maven cache
       - name: Cache Maven packages
          #This action allows caching dependencies and build outputs to improve workflow execution time.
         uses: actions/cache@v1
         with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
        #Build the application using Maven
       - name: Build with Maven
         run: mvn -B package -DskipTests --file pom.xml
        #Build the application using Maven
       - name: Upload JAR
          #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
         uses: actions/upload-artifact@v2
         with:
            #Set artifact name
            name: plasmaspringbuild
            #From this path
            path: backend/target/plasmaDonationManagement-0.0.1-SNAPSHOT.jar
  tests:
    name: Unit tests
    needs: build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run Tests
      - name: Run Tests
        run: mvn -B test
  
  dockerize:
    needs: tests
    name: build-push-to-docker
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    env: 
      REPO: aryavrdhn/plasmadonation-spring-app
    
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} 
             -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build Docker image
        run: docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
      - name: Publish Docker image
        run: docker push $REPO
    
    
  
  sonar:
    #Depends on test's job
    needs: tests
    name: SonarCloud analysis
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up SonarCloud cache
      - name: Cache SonarCloud packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Analyze project with SonarCloud
      - name: Analyze with SonarCloud
        run: mvn -B verify sonar:sonar -Dsonar.projectKey=bharathjoshi_plasmaDonation -Dsonar.organization=bharathjoshi -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  
    
  deploy:
    #Depends on build's job
    needs: tests
    name: Deploy
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Download JAR
        #Download the artifact which was uploaded in the build's job
        uses: actions/download-artifact@v2
        with:
          name: plasmaspringbuild
      #Deploy the artifact (JAR) into AWS Beanstalk
      - name: Deploy to Elastic
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          use_existing_version_if_available: false
          application_name: plasmaDonation
          environment_name: Plasmadonation-env
          version_label: ${{github.SHA}}
          region: us-west-2
          deployment_package: plasmaDonationManagement-0.0.1-SNAPSHOT.jar    
